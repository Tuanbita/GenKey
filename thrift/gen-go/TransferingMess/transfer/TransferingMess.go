// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package transfer

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Structs are the basic complex data structures. They are comprised of fields
// which each have an integer identifier, a type, a symbolic name, and an
// optional default value.
// 
// Fields can be declared "optional", which ensures they will not be included
// in the serialized output if they aren't set.  Note that this requires some
// manual management in some languages.
// 
// Attributes:
//  - Timestamp
//  - ToPub
//  - EncMsg
//  - MsgToVerifyClient
//  - Signature
//  - ChildPath
//  - ToEndpoint
type ChatMessage struct {
  Timestamp int64 `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  ToPub string `thrift:"toPub,2" db:"toPub" json:"toPub"`
  EncMsg string `thrift:"encMsg,3" db:"encMsg" json:"encMsg"`
  MsgToVerifyClient string `thrift:"msgToVerifyClient,4" db:"msgToVerifyClient" json:"msgToVerifyClient"`
  Signature string `thrift:"Signature,5" db:"Signature" json:"Signature"`
  ChildPath string `thrift:"childPath,6" db:"childPath" json:"childPath"`
  ToEndpoint string `thrift:"toEndpoint,7" db:"toEndpoint" json:"toEndpoint"`
}

func NewChatMessage() *ChatMessage {
  return &ChatMessage{}
}


func (p *ChatMessage) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *ChatMessage) GetToPub() string {
  return p.ToPub
}

func (p *ChatMessage) GetEncMsg() string {
  return p.EncMsg
}

func (p *ChatMessage) GetMsgToVerifyClient() string {
  return p.MsgToVerifyClient
}

func (p *ChatMessage) GetSignature() string {
  return p.Signature
}

func (p *ChatMessage) GetChildPath() string {
  return p.ChildPath
}

func (p *ChatMessage) GetToEndpoint() string {
  return p.ToEndpoint
}
func (p *ChatMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ChatMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ToPub = v
}
  return nil
}

func (p *ChatMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EncMsg = v
}
  return nil
}

func (p *ChatMessage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MsgToVerifyClient = v
}
  return nil
}

func (p *ChatMessage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *ChatMessage)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChildPath = v
}
  return nil
}

func (p *ChatMessage)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ToEndpoint = v
}
  return nil
}

func (p *ChatMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *ChatMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toPub", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toPub: ", p), err) }
  if err := oprot.WriteString(string(p.ToPub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toPub (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toPub: ", p), err) }
  return err
}

func (p *ChatMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encMsg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:encMsg: ", p), err) }
  if err := oprot.WriteString(string(p.EncMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encMsg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:encMsg: ", p), err) }
  return err
}

func (p *ChatMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msgToVerifyClient", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msgToVerifyClient: ", p), err) }
  if err := oprot.WriteString(string(p.MsgToVerifyClient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msgToVerifyClient (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msgToVerifyClient: ", p), err) }
  return err
}

func (p *ChatMessage) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Signature", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Signature (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Signature: ", p), err) }
  return err
}

func (p *ChatMessage) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("childPath", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:childPath: ", p), err) }
  if err := oprot.WriteString(string(p.ChildPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.childPath (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:childPath: ", p), err) }
  return err
}

func (p *ChatMessage) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toEndpoint", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toEndpoint: ", p), err) }
  if err := oprot.WriteString(string(p.ToEndpoint)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toEndpoint (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toEndpoint: ", p), err) }
  return err
}

func (p *ChatMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatMessage(%+v)", *p)
}

// Attributes:
//  - AddressEndpoint
//  - PubkeyClient
type Info struct {
  AddressEndpoint string `thrift:"addressEndpoint,1" db:"addressEndpoint" json:"addressEndpoint"`
  PubkeyClient string `thrift:"pubkeyClient,2" db:"pubkeyClient" json:"pubkeyClient"`
}

func NewInfo() *Info {
  return &Info{}
}


func (p *Info) GetAddressEndpoint() string {
  return p.AddressEndpoint
}

func (p *Info) GetPubkeyClient() string {
  return p.PubkeyClient
}
func (p *Info) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Info)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AddressEndpoint = v
}
  return nil
}

func (p *Info)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PubkeyClient = v
}
  return nil
}

func (p *Info) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Info) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addressEndpoint", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addressEndpoint: ", p), err) }
  if err := oprot.WriteString(string(p.AddressEndpoint)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addressEndpoint (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addressEndpoint: ", p), err) }
  return err
}

func (p *Info) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkeyClient", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubkeyClient: ", p), err) }
  if err := oprot.WriteString(string(p.PubkeyClient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkeyClient (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubkeyClient: ", p), err) }
  return err
}

func (p *Info) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Info(%+v)", *p)
}

type TransferMessage interface {
  // Parameters:
  //  - ChatMessage
  Transfering(ctx context.Context, chatMessage *ChatMessage) (err error)
  // Parameters:
  //  - InfoEndpoint
  EventAddClient(ctx context.Context, infoEndpoint *Info) (err error)
  // Parameters:
  //  - Pubkey
  EventRemoveClient(ctx context.Context, pubkey string) (err error)
}

type TransferMessageClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTransferMessage instead
func NewTransferMessageClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TransferMessageClient {
  return &TransferMessageClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTransferMessage instead
func NewTransferMessageClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TransferMessageClient {
  return &TransferMessageClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTransferMessageClient(c thrift.TClient) *TransferMessageClient {
  return &TransferMessageClient{
    c: c,
  }
}

// Parameters:
//  - ChatMessage
func (p *TransferMessageClient) Transfering(ctx context.Context, chatMessage *ChatMessage) (err error) {
  var _args0 TransferMessageTransferingArgs
  _args0.ChatMessage = chatMessage
  var _result1 TransferMessageTransferingResult
  if err = p.c.Call(ctx, "transfering", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - InfoEndpoint
func (p *TransferMessageClient) EventAddClient(ctx context.Context, infoEndpoint *Info) (err error) {
  var _args2 TransferMessageEventAddClientArgs
  _args2.InfoEndpoint = infoEndpoint
  var _result3 TransferMessageEventAddClientResult
  if err = p.c.Call(ctx, "eventAddClient", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Pubkey
func (p *TransferMessageClient) EventRemoveClient(ctx context.Context, pubkey string) (err error) {
  var _args4 TransferMessageEventRemoveClientArgs
  _args4.Pubkey = pubkey
  var _result5 TransferMessageEventRemoveClientResult
  if err = p.c.Call(ctx, "eventRemoveClient", &_args4, &_result5); err != nil {
    return
  }
  return nil
}

type TransferMessageProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TransferMessage
}

func (p *TransferMessageProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TransferMessageProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TransferMessageProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTransferMessageProcessor(handler TransferMessage) *TransferMessageProcessor {

  self6 := &TransferMessageProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["transfering"] = &transferMessageProcessorTransfering{handler:handler}
  self6.processorMap["eventAddClient"] = &transferMessageProcessorEventAddClient{handler:handler}
  self6.processorMap["eventRemoveClient"] = &transferMessageProcessorEventRemoveClient{handler:handler}
return self6
}

func (p *TransferMessageProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type transferMessageProcessorTransfering struct {
  handler TransferMessage
}

func (p *transferMessageProcessorTransfering) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TransferMessageTransferingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("transfering", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TransferMessageTransferingResult{}
  var err2 error
  if err2 = p.handler.Transfering(ctx, args.ChatMessage); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transfering: " + err2.Error())
    oprot.WriteMessageBegin("transfering", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("transfering", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type transferMessageProcessorEventAddClient struct {
  handler TransferMessage
}

func (p *transferMessageProcessorEventAddClient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TransferMessageEventAddClientArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("eventAddClient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TransferMessageEventAddClientResult{}
  var err2 error
  if err2 = p.handler.EventAddClient(ctx, args.InfoEndpoint); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing eventAddClient: " + err2.Error())
    oprot.WriteMessageBegin("eventAddClient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("eventAddClient", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type transferMessageProcessorEventRemoveClient struct {
  handler TransferMessage
}

func (p *transferMessageProcessorEventRemoveClient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TransferMessageEventRemoveClientArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("eventRemoveClient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TransferMessageEventRemoveClientResult{}
  var err2 error
  if err2 = p.handler.EventRemoveClient(ctx, args.Pubkey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing eventRemoveClient: " + err2.Error())
    oprot.WriteMessageBegin("eventRemoveClient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("eventRemoveClient", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ChatMessage
type TransferMessageTransferingArgs struct {
  ChatMessage *ChatMessage `thrift:"chatMessage,1" db:"chatMessage" json:"chatMessage"`
}

func NewTransferMessageTransferingArgs() *TransferMessageTransferingArgs {
  return &TransferMessageTransferingArgs{}
}

var TransferMessageTransferingArgs_ChatMessage_DEFAULT *ChatMessage
func (p *TransferMessageTransferingArgs) GetChatMessage() *ChatMessage {
  if !p.IsSetChatMessage() {
    return TransferMessageTransferingArgs_ChatMessage_DEFAULT
  }
return p.ChatMessage
}
func (p *TransferMessageTransferingArgs) IsSetChatMessage() bool {
  return p.ChatMessage != nil
}

func (p *TransferMessageTransferingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageTransferingArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ChatMessage = &ChatMessage{}
  if err := p.ChatMessage.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChatMessage), err)
  }
  return nil
}

func (p *TransferMessageTransferingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("transfering_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageTransferingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMessage", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMessage: ", p), err) }
  if err := p.ChatMessage.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChatMessage), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMessage: ", p), err) }
  return err
}

func (p *TransferMessageTransferingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageTransferingArgs(%+v)", *p)
}

type TransferMessageTransferingResult struct {
}

func NewTransferMessageTransferingResult() *TransferMessageTransferingResult {
  return &TransferMessageTransferingResult{}
}

func (p *TransferMessageTransferingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageTransferingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("transfering_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageTransferingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageTransferingResult(%+v)", *p)
}

// Attributes:
//  - InfoEndpoint
type TransferMessageEventAddClientArgs struct {
  InfoEndpoint *Info `thrift:"infoEndpoint,1" db:"infoEndpoint" json:"infoEndpoint"`
}

func NewTransferMessageEventAddClientArgs() *TransferMessageEventAddClientArgs {
  return &TransferMessageEventAddClientArgs{}
}

var TransferMessageEventAddClientArgs_InfoEndpoint_DEFAULT *Info
func (p *TransferMessageEventAddClientArgs) GetInfoEndpoint() *Info {
  if !p.IsSetInfoEndpoint() {
    return TransferMessageEventAddClientArgs_InfoEndpoint_DEFAULT
  }
return p.InfoEndpoint
}
func (p *TransferMessageEventAddClientArgs) IsSetInfoEndpoint() bool {
  return p.InfoEndpoint != nil
}

func (p *TransferMessageEventAddClientArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageEventAddClientArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.InfoEndpoint = &Info{}
  if err := p.InfoEndpoint.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InfoEndpoint), err)
  }
  return nil
}

func (p *TransferMessageEventAddClientArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("eventAddClient_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageEventAddClientArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("infoEndpoint", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infoEndpoint: ", p), err) }
  if err := p.InfoEndpoint.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InfoEndpoint), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infoEndpoint: ", p), err) }
  return err
}

func (p *TransferMessageEventAddClientArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageEventAddClientArgs(%+v)", *p)
}

type TransferMessageEventAddClientResult struct {
}

func NewTransferMessageEventAddClientResult() *TransferMessageEventAddClientResult {
  return &TransferMessageEventAddClientResult{}
}

func (p *TransferMessageEventAddClientResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageEventAddClientResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("eventAddClient_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageEventAddClientResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageEventAddClientResult(%+v)", *p)
}

// Attributes:
//  - Pubkey
type TransferMessageEventRemoveClientArgs struct {
  Pubkey string `thrift:"pubkey,1" db:"pubkey" json:"pubkey"`
}

func NewTransferMessageEventRemoveClientArgs() *TransferMessageEventRemoveClientArgs {
  return &TransferMessageEventRemoveClientArgs{}
}


func (p *TransferMessageEventRemoveClientArgs) GetPubkey() string {
  return p.Pubkey
}
func (p *TransferMessageEventRemoveClientArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageEventRemoveClientArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *TransferMessageEventRemoveClientArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("eventRemoveClient_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageEventRemoveClientArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubkey: ", p), err) }
  return err
}

func (p *TransferMessageEventRemoveClientArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageEventRemoveClientArgs(%+v)", *p)
}

type TransferMessageEventRemoveClientResult struct {
}

func NewTransferMessageEventRemoveClientResult() *TransferMessageEventRemoveClientResult {
  return &TransferMessageEventRemoveClientResult{}
}

func (p *TransferMessageEventRemoveClientResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferMessageEventRemoveClientResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("eventRemoveClient_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferMessageEventRemoveClientResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferMessageEventRemoveClientResult(%+v)", *p)
}


